{"title": "Computer Science", "description": "Computer Science is the study of computers and computational systems, covering both theoretical and practical aspects of the discipline. It includes a wide range of sub-fields and specializations, focusing on the design and development of software, algorithms, and systems.", "extend": {"title": "Foundational Topics", "description": "Core concepts that form the basis of computer science knowledge.", "extend": {"Programming": {"title": "Programming", "description": "The process of designing and building an executable computer program to accomplish a specific task. Programming involves writing code and solving problems using computational logic.", "extend": {"Languages": {"title": "Languages", "description": "Various programming languages used to write software. Each language has its own syntax, semantics, and applications.", "extend": {"Python": {"title": "Python", "description": "A high-level, interpreted programming language known for its readability and versatility. Popular in web development, data science, automation, and more.", "extend": {}, "completedTask": false}, "Java": {"title": "Java", "description": "A high-level, class-based, object-oriented programming language designed to have as few implementation dependencies as possible. Widely used in enterprise applications, mobile applications, and more.", "extend": {}, "completedTask": false}, "C++": {"title": "C++", "description": "A general-purpose programming language with imperative and object-oriented features, widely used for system/software development, game development, and high-performance applications.", "extend": {}, "completedTask": false}}, "completedTask": false}, "Data Structures": {"title": "Data Structures", "description": "Ways of organizing and storing data so it can be accessed and modified efficiently. Critical for developing efficient algorithms.", "extend": {"Arrays": {"title": "Arrays", "description": "A data structure consisting of a collection of elements, each identified by an array index. Used for storing fixed-size sequential collections of elements of the same type.", "extend": {}, "completedTask": false}, "Linked Lists": {"title": "Linked Lists", "description": "A linear collection of data elements where the order is not determined by the physical placement in memory but by pointers in each element. Used for dynamic memory allocation.", "extend": {}, "completedTask": false}, "Trees": {"title": "Trees", "description": "A hierarchical data structure consisting of nodes, with a root node and children nodes forming a parent-child hierarchy. Binary trees, AVL trees, and B-trees are common types.", "extend": {}, "completedTask": false}}, "completedTask": false}, "Algorithms": {"title": "Algorithms", "description": "A sequence of steps or rules designed for carrying out a process or computation. Fundamental to solving computational problems efficiently.", "extend": {"Sorting Algorithms": {"title": "Sorting Algorithms", "description": "Algorithms that arrange data in a specified order. Common examples include QuickSort, MergeSort, and BubbleSort.", "extend": {}, "completedTask": false}, "Search Algorithms": {"title": "Search Algorithms", "description": "Techniques designed to retrieve information stored within some data structure. Common examples include Binary Search and Breadth-First Search.", "extend": {}, "completedTask": false}, "Graph Algorithms": {"title": "Graph Algorithms", "description": "A set of instructions that traverse, explore, and find optimal paths in graphs. Examples include Dijkstra's Algorithm and Depth-First Search.", "extend": {}, "completedTask": false}}, "completedTask": false}}, "completedTask": false}, "Theory of Computation": {"title": "Theory of Computation", "description": "The branch of computer science that deals with whether and how efficiently problems can be solved on a model of computation using an algorithm.", "extend": {"Automata Theory": {"title": "Automata Theory", "description": "Study of abstract machines and the problems they can solve. Automata are used to understand the behavior of algorithms and develop the theoretical foundations for computation.", "extend": {}, "completedTask": false}, "Complexity Theory": {"title": "Complexity Theory", "description": "Focuses on classifying computational problems according to their inherent difficulty, and relating those classes to each other.", "extend": {}, "completedTask": false}, "Computability Theory": {"title": "Computability Theory", "description": "Determines the limits of what can be efficiently computed and explores the capabilities and limitations of various computational models.", "extend": {}, "completedTask": false}}, "completedTask": false}}, "completedTask": false}}